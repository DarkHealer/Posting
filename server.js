
//Ce server utilise le contract Posting.sol


var express = require('express');
var app = express();

var fs = require('fs');
var cOrdre = fs.readFileSync("Referentiel/Ordre.json");
var cBaseClient = fs.readFileSync("Referentiel/BaseClient.json");
var cBaseBareme = fs.readFileSync("Referentiel/BaseBareme.json");
var cBaseCalend = fs.readFileSync("Referentiel/BaseCalend.json");
var cBaseDepot = fs.readFileSync("Referentiel/BaseDepot.json");
var cBaseTiers = fs.readFileSync("Referentiel/BaseTiers.json");
var cBaseValeur = fs.readFileSync("Referentiel/BaseValeur.json");

var ordre = JSON.parse(cOrdre);
var BaseClient = JSON.parse(cBaseClient);
var BaseBareme = JSON.parse(cBaseBareme);
var BaseCalend = JSON.parse(cBaseCalend);
var BaseDepot = JSON.parse(cBaseDepot);
var BaseTiers = JSON.parse(cBaseTiers);
var BaseValeur = JSON.parse(cBaseValeur);

var bodyParser = require('body-parser');
var multer = require('multer');
var upload = multer();
app.use(bodyParser.json()); 
app.use(bodyParser.urlencoded({extended: false})); 


var Web3 = require('web3');
var web3 = new Web3();
web3.setProvider(new web3.providers.HttpProvider('http://localhost:8545'));

var addressContract;
var contractInstance;
var contract;

//Deploy the smart contract
app.get('/deploy', function(req, res) {
    //init constructor input
   var vRef = ordre.reference;
    var vQuantite = ordre.quantite;
    var vMontant = ordre.montant;
    //Contract Interface
   contract = web3.eth.contract([{"constant":false,"inputs":[{"name":"coursCot","type":"uint256"},{"name":"plCot","type":"uint256"}],"name":"calcul","outputs":[{"name":"result","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"getState","outputs":[{"name":"truc","type":"uint8"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"_aMontant","outputs":[{"name":"","type":"string"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"avisOperer","outputs":[{"name":"message","type":"string"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"_numOffre","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"_aBareme","outputs":[{"name":"","type":"string"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"result","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"_aValeur","outputs":[{"name":"","type":"string"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"val","type":"uint256"}],"name":"getOffre","outputs":[{"name":"Valeur","type":"string"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"_aQuantite","outputs":[{"name":"","type":"string"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"_state","outputs":[{"name":"","type":"uint8"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"state","type":"uint8"},{"name":"message","type":"string"}],"name":"setState","outputs":[{"name":"mess","type":"string"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"vQuantite","type":"string"},{"name":"vMontant","type":"string"}],"name":"addOffre","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"_aRef","outputs":[{"name":"","type":"string"}],"payable":false,"type":"function"},{"inputs":[{"name":"vRef","type":"string"},{"name":"vQuantite","type":"string"},{"name":"vMontant","type":"string"}],"payable":false,"type":"constructor"}]);

    //Instaciate the contract in the blockchain
    contractInstance = contract.new(
        vRef,
        vQuantite,
        vMontant, {
            from: web3.eth.accounts[0],
            data: '', 
            gas: '4700000'
        },
        function(e, contract) {
            console.log(e, contract);
            //Store instance address
            addressContract = contract.address;
            if (typeof contract.address !== 'undefined') {
                console.log('Contract mined! address: ' + contract.address + ' transactionHash: ' + contract.transactionHash);
                res.end("Contract Posting created at the address:\n" + contract.address);
            }
        })

})


//Permet d'obtenir les informations de l'ordre passé
.get('/informations', function(req, res) {
    //Get _isopen value
    var Ref = contractInstance._aRef();
    var Quant = contractInstance._aQuantite();
    var Mont = contractInstance._aMontant();
    var nbOffre = contractInstance._numOffre();
    //var calcul = calcul();
    //res.end(calcul + "\n");
    //display it
    res.end("Pour l'ordre de référence " + Ref+ ".\nLe client a commandé " + Quant + " titres pour une valeur de "+ Mont + " par titre.\nIl y a pour l'instant " + nbOffre + " offre(s).");
    var cal = calcul();
    var result = contractInstance.result()
    console.log(result);
    var getData = contractInstance.calcul.getData(cal, 25);
    sendEther(getData);
    console.log(result);
})



//Permet d'entrer une offre
.get('/Offre/:Quant/:Montant', function(req, res, next){
    var Quant = req.params.Quant;
    var Montant = req.params.Montant;
    //appel de la fonction
    var getData = contractInstance.addOffre.getData(Quant, Montant);
    //transfert d'ether au contrat
     sendEther(getData);
})


.get('/State/get/', function(req, res) {
    //Get _isopen value
    var state = contractInstance._state();
    console.log(state);
    console.log(state.String);
    console.log(state.c[0]);
    switch(state.c[0]) {
    case 1:
        res.end("BBACC : Le contrat a été validé par le tiers");// A compéter avec les JSON
        break;
    case 2:
        res.end("BBREF : Le contrat a été refusé par le tiers");// A compéter avec les JSON
        break;
    default:
        res.end("BBAO : Le contrat n'a pas été validé");
    }

})

.get('/State/set/:newState', function(req, res) {

    var newState = req.params.newState;
    
    var tab = newState.split(" ");
    switch(tab[0]) {
    case "BBREF":
        var getData = contractInstance.setState.getData(2, tab[1]);
        sendEther(getData);
        console.log(contractInstance._state());

        console.log("\n"+getData);
        res.end("Enregistrement du refus");
       
        break;
    case "BBACC":
        var getData = contractInstance.setState.getData(1, "");
        sendEther(getData);
        res.end("Enregistrement de l'acceptation");// A compéter avec les JSON

        console.log(contractInstance._state());
        break;
    default:
        res.end("Le contrat n'a pas été validé");
    }

})


.get('/resumOffre/', function(req, res){

    var getData = contractInstance.getOffre.getData(0);
    //sendEther(getData);

    console.log(getData);

})



.use(function(req, res, next){
    res.setHeader('Content-Type', 'text/plain');
    res.send(404, 'Page introuvable !');
});


function calcul(){
     var code = BaseValeur[0].codeBareme; code = code.toLowerCase(); 


    //if(code.valueOf() == Bareme.valueOf()) console.log("true");
    for(var i=0; i<2; i++){   //attention le 2 est codé en dur
        var Bareme = BaseBareme[i].Bareme;Bareme = Bareme.toLowerCase();
        if(code.valueOf() == Bareme.valueOf()){
            MontantBrut = BaseBareme[i].MontantBrut;
            return MontantBrut;
        } 
    }

}

function sendEther(getData){
    web3.eth.sendTransaction({
        from: web3.eth.coinbase,
        to: addressContract,
        data: getData
    });
}


var server = app.listen(8081, function() {

    var host = server.address().address
    var port = server.address().port

    console.log("SmartContract DApp listening at http://%s:%s", host, port)

})

//app.use('/', express.static('./routes/contract.html'));